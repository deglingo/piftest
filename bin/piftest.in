#!@PYTHON@
# -*- python -*-

import sys, os, getopt, configparser, subprocess, re, pprint, tempfile, shlex, glob, errno

DEBUG = ('PIFTEST_DEBUG' in os.environ
         and os.environ['PIFTEST_DEBUG'])

# trace:
def trace (msg) :
    if DEBUG :
        sys.stderr.write('piftest: %s\n' % msg)

# Config:
class Config :

    srcdir = property(lambda s: s.get_srcdir())
    
    # __init__:
    def __init__ (self) :
        self.progpath = os.path.realpath(sys.argv[0])
        self.top_srcdir = ''
        self.subdir = ''

    def get_srcdir (self) :
        assert self.top_srcdir
        assert self.subdir
        return os.path.join(self.top_srcdir, self.subdir)

    # read_file:
    def read_file (self, cfgfile) :
        defaults = {
            'cflags': '',
            'ldflags': '',
            'extra_sources': [],
            'valgrind_supp_files': '',
        }
        self.cfgfile = os.path.realpath(cfgfile)
        parser = configparser.ConfigParser(defaults=defaults)
        parser.read_file(open(self.cfgfile, 'rt'))
        self.suite = parser['DEFAULT']['suite']
        # self.srcdir = parser['DEFAULT']['srcdir']
        self.modules = parser['DEFAULT']['modules'].split()
        self.cflags = parser['DEFAULT']['cflags']
        self.ldflags = parser['DEFAULT']['ldflags']
        self.extra_sources = parser['DEFAULT']['extra_sources'].split()
        self.extra_c = []
        for fname in self.extra_sources :
            base, ext = os.path.splitext(fname)
            if ext == '.c' :
                self.extra_c.append(base)
            else :
                assert 0, (base, ext)
        self.valgrind_supp_files = parser['DEFAULT']['valgrind_supp_files'].split()

# Writer:
class Writer :

    # __init__:
    def __init__ (self) :
        self.root = WSection()

    # get_section:
    def get_section (self, path) :
        s = self.root
        if path != '' :
            for comp in path.split('.') :
                s = s.children[comp]
        return s

    # section:
    def section (self, path) :
        dot = path.rfind('.')
        if dot < 0 :
            parent = self.root
            name = path
        else :
            parent = self.get_section(path[:dot])
            name = path[dot+1:]
        parent.add_child(name)

    # write:
    def write (self, section, *text) :
        s = self.get_section(section)
        s.write(*text)

    # write_loc:
    def write_loc (self, section) :
        s = self.get_section(section)
        s.write_loc()
        
    # write_rule:
    def write_rule (self, section, targets, prereqs=None, recipe=None) :
        s = self.get_section(section)
        s.write_rule(targets, prereqs, recipe)

    # dump:
    def dump (self, f, fname) :
        ctxt = WriterContext(os.path.realpath(fname))
        self.root.dump(f, ctxt)

# WriterContext:
class WriterContext :

    def __init__ (self, fname) :
        self.fname = fname
        self.lineno = 1

# WSection:
class WSection :

    # __init__:
    def __init__ (self) :
        self.nodes = []
        self.children = {}

    # add_child:
    def add_child (self, name) :
        assert name not in self.children, name
        child = WSection()
        self.nodes.append(child)
        self.children[name] = child
        
    # dump:
    def dump (self, f, ctxt) :
        for n in self.nodes :
            n.dump(f, ctxt)

    # write:
    def write (self, *text) :
        self.nodes.extend(WText(t) for t in text)

    # write_loc:
    def write_loc (self) :
        self.nodes.append(WLocation())

    # write_rule:
    def write_rule (self, targets, prereqs=None, recipe=None) :
        self.nodes.append(WRule(targets, prereqs, recipe))

# WText:
class WText :

    # __init__:
    def __init__ (self, text) :
        self.text = text

    # dump:
    def dump (self, f, ctxt) :
        f.write(self.text)
        ctxt.lineno += self.text.count('\n')

# WLocation:
class WLocation :

    # dump:
    def dump (self, f, ctxt) :
        f.write('\n# %d "%s"\n' % (ctxt.lineno, ctxt.fname))
        ctxt.lineno += 2

# WRule:
class WRule :

    # __init__
    def __init__ (self, targets, prereqs=None, recipe=None) :
        self.targets = self._fixlist(targets)
        self.prereqs = self._fixlist(prereqs)
        self.recipe = self._fixlist(recipe)

    def _fixlist (self, arg) :
        if arg is None : return ()
        elif isinstance(arg, str) : return (arg,)
        else : return tuple(arg)

    # dump:
    def dump (self, f, ctxt) :
        # [fixme] this ignores ctxt !?
        f.write(' '.join(self.targets))
        f.write(': ')
        f.write(' '.join(self.prereqs))
        f.write('\n')
        for c in self.recipe :
            f.write('\t%s\n' % c)

# Token:
class Token :

    def __init__ (self, tp, val='', loc=()) :
        self.tp = tp
        self.val = val
        self.loc = tuple(loc)

    def __repr__ (self) :
        return '<%s "%s">' % (self.tp, self.val.replace('\n', '\\n'))

# Parser:
class Parser :

    TOKEN_SPECS = (
        ('NL',  r'\n'),
        ('SPC', r'[ \t]+'),
        ('IDENT', r'[a-zA-Z_][a-zA-Z0-9_]*'),
        ('STRING', r'"[^"]*"'), # [fixme]
        ('CHAR', r"'.'"),
        ('INT', r'[0-9]+'),
        ('ARROW', r'->'),
        ('AND', r'&&'),
        ('OR', r'\|\|'),
        ('PLUSPLUS', r'\+\+'),
        ('MINUSMINUS', r'--'),
        ('EQUALEQUAL', r'=='),
        ('NOTEQUAL', r'!='),
        ('GE', r'>='),
        ('LE', r'<='),
        ('DOT', r'\.'),
        ('NOT', r'!'),
        ('TEST', r'\?'),
        ('COLON', r':'),
        ('EQUAL', r'='),
        ('STAR', r'\*'),
        ('PLUS', r'\+'),
        ('MINUS', r'-'),
        ('GT', r'>'),
        ('LT', r'<'),
        ('AMPER', r'&'),
        ('COMA', r','),
        ('SEMICOLON', r';'),
        ('OPEN_BRACE', r'\{'),
        ('CLOSE_BRACE', r'\}'),
        ('OPEN_SQUARE', r'\['),
        ('CLOSE_SQUARE', r'\]'),
        ('OPEN_PAR', r'\('),
        ('CLOSE_PAR', r'\)'),
    )

    RE_LEX = re.compile('|'.join('(?P<%s>%s)' % (n, r) for n, r in TOKEN_SPECS))

    RE_LOCATION = re.compile(r'#\s+(?P<LNO>\d+)\s+"(?P<FNAME>[^"]*)".*$')
    RE_CPPDIRECTIVE = re.compile('^#(?P<DIR>#.*)$')

    # __init__:
    def __init__ (self, modname) :
        self.modname = modname
        
    # parse:
    def parse (self, fin) :
        self.init(fin)
        ast = self.parse_input()
        return ast

    # init:
    def init (self, fin) :
        self.fin = fin
        self.tokbuf = []
        self.pos = 0
        self.buffer = ''
        self.lineno = 1
        self.fname = '<input>'

    # error:
    def error (self, msg) :
        sys.stderr.write("piftest:%s:%d: %s\n" %
                         (self.fname, self.lineno, msg))
        
    # parse_input:
    def parse_input (self) :
        h, gs, d, s, t, b = self.parse_unit_body('END')
        return ('unit', (), self.modname, h, gs, d, s, t, b)
    
    # parse_unit:
    def parse_unit (self) :
        self.lex('IDENT', 'unit')
        # name
        tok = self.look()
        if tok.tp == 'IDENT' :
            self.lex()
            name = tok.val
        else :
            name = ''
        self.lex('OPEN_BRACE')
        h, gs, d, s, t, b = self.parse_unit_body('CLOSE_BRACE')
        self.lex('CLOSE_BRACE')
        return ('unit', (), name, h, gs, d, s, t, b)

    # parse_unit_body:
    def parse_unit_body (self, end) :
        body = []
        headers = []
        global_setup = None
        data = None
        setup = None
        teardown = None
        names = set()
        index = 0
        anonymous = []
        while True :
            tok = self.look()
            if tok.tp == end :
                break
            elif tok.tp == 'IDENT' :
                if tok.val == 'header' :
                    headers.append(self.parse_header())
                elif tok.val == 'data' :
                    if data is not None :
                        self.error("duplicated data block")
                        assert 0
                    data = self.parse_data()
                elif tok.val == 'global_setup' :
                    assert global_setup is None
                    global_setup = self.parse_global_setup()
                elif tok.val == 'setup' :
                    if setup is not None :
                        self.error("duplicated setup block")
                        assert 0
                    setup = self.parse_setup()
                elif tok.val == 'teardown' :
                    if teardown is not None :
                        self.error("duplicated teardown block")
                        assert 0
                    teardown = self.parse_teardown()
                elif tok.val == 'unit' :
                    unit = self.parse_unit()
                    body.append(unit)
                    if unit[2] == '' :
                        anonymous.append(index)
                    else :
                        assert unit[2] not in names, unit[2]
                        names.add(unit[2])
                    index += 1
                elif tok.val == 'test' :
                    test = self.parse_test()
                    body.append(test)
                    if test[2] == '' :
                        anonymous.append(index)
                    else :
                        assert test[2] not in names, test[2]
                        names.add(test[2])
                    index += 1
                else :
                    self.error("unexpected token: '%s' (%s)" %
                               (tok.val, tok.tp))
                    assert 0
            else :
                assert 0, tok
        # fix names
        n = 1
        for index in anonymous :
            while True :
                name = '%s%d' % (body[index][0], n)
                n += 1
                if name not in names :
                    body[index] = body[index][:2] + (name,) + body[index][3:]
                    break
        #
        return (headers, global_setup, data, setup, teardown, tuple(body))

    # parse_header:
    def parse_header (self) :
        self.lex('IDENT', 'header')
        code = self.parse_code()
        return ('header', (), code)

    # parse_global_setup:
    def parse_global_setup (self) :
        self.lex('IDENT', 'global_setup')
        code = self.parse_code()
        return ('global_setup', (), code)
        
    # parse_data:
    def parse_data (self) :
        self.lex('IDENT', 'data')
        code = self.parse_code()
        return ('data', (), code)

    # parse_setup:
    def parse_setup (self) :
        self.lex('IDENT', 'setup')
        code = self.parse_code()
        return ('setup', (), code)

    # parse_teardown:
    def parse_teardown (self) :
        self.lex('IDENT', 'teardown')
        code = self.parse_code()
        return ('teardown', (), code)

    # parse_test:
    def parse_test (self) :
        self.lex('IDENT', 'test')
        # name
        tok = self.look()
        if tok.tp == 'IDENT' :
            self.lex()
            name = tok.val
        else :
            name = ''
        code = self.parse_code()
        return ('test', (), name, code)

    # parse_code:
    def parse_code (self) :
        tok = self.lex('OPEN_BRACE')
        loc = tok.loc
        code = []
        depth = 1
        while True :
            tok = self.lex(raw=True)
            if tok.tp == 'OPEN_BRACE' :
                depth += 1
            elif tok.tp == 'CLOSE_BRACE' :
                depth -= 1
                if depth == 0 :
                    break
            code.append(tok.val)
        return ('code', loc, ''.join(code))

    # lex:
    def lex (self, tp=None, val=None, raw=False) :
        while True :
            if self.tokbuf :
                tok = self.tokbuf.pop()
            else :
                tok = self.__lex()
            if raw or tok.tp not in ('NL', 'SPC') :
                break
        assert tp is None or tp == tok.tp, (tp, tok)
        assert val is None or val == tok.val, (val, tok)
        return tok

    # unlex:
    def unlex (self, tok) :
        self.tokbuf.append(tok)

    # look:
    def look (self, raw=False) :
        tok = self.lex(raw=raw)
        self.unlex(tok)
        return tok

    # __lex:
    def __lex (self) :
        # feed the buffer
        while self.pos >= len(self.buffer) :
            self.pos = 0
            self.buffer = self.fin.readline()
            self.lineno += 1
            self.loc = (self.fname, self.lineno)
            if self.buffer == '' :
                return Token('END', loc=self.loc)
            m = Parser.RE_LOCATION.match(self.buffer)
            if m is not None :
                self.lineno = int(m.group('LNO')) - 1
                self.fname = m.group('FNAME')
                self.loc = (self.fname, self.lineno)
                self.buffer = ''
                continue
            m = Parser.RE_CPPDIRECTIVE.match(self.buffer)
            if m is not None :
                directive = m.group('DIR')
                self.buffer = ''
                return Token('CPP', directive+'\n', loc=self.loc)
        # get one token
        m = Parser.RE_LEX.match(self.buffer, self.pos)
        assert m is not None, self.buffer[self.pos:]
        assert m.start() == self.pos
        tp = m.lastgroup
        val = self.buffer[m.start():m.end()]
        self.pos = m.end()
        return Token(tp, val, loc=self.loc)

# ASTContext:
class ASTContext :

    parent = property(lambda s: s.__parent)
    
    def __init__ (self, parent) :
        self.__parent = parent
        self.__attrs = {}
        
    def __setattr__ (s, n, v) :
        if n[0] == '_' :
            object.__setattr__(s, n, v)
        else :
            s.__attrs[n] = v

    def __getattr__ (s, n) :
        if n[0] == '_' :
            return object.__getattr__(s, n)
        else :
            try: return s.__attrs[n]
            except KeyError: return getattr(s.__parent, n)

# ASTVisitor:
class ASTVisitor :

    # process:
    def process (self, node) :
        assert node[0] == 'unit'
        self.modname = node[2]
        self.context = ASTContext(None)
        self.context.unit_path = ''
        self.context.data_stack = ()
        self.context.setup_stack = ()
        self.context.teardown_stack = ()
        self.writer = Writer()
        self.writer.section('top')
        self.writer.section('includes')
        self.writer.section('headers')
        self.writer.section('typedefs')
        self.writer.section('datadefs')
        self.writer.section('fndecls')
        self.writer.section('modinit')
        self.writer.section('modinit.head')
        self.writer.section('modinit.body')
        self.writer.section('modinit.foot')
        self.writer.section('fndefs')
        self.writer.write('top', '/* AUTO-GENERATED FILE - DO NOT HAND EDIT! */\n')
        self.writer.write('includes',
                          '#include <piftest.h>\n',
                          '#include <piftools.h>\n')
        # init_func
        init_func = get_module_init_func(self.modname)
        self.writer.write('modinit.head',
                          'void %s ( PifSuite *suite )\n' % init_func,
                          '{\n')
        self.writer.write('modinit.foot',
                          '}\n')
        # go
        self.visit(node)

    # visit:
    def visit (self, node) :
        self.context = ASTContext(self.context)
        hdlr = getattr(self, 'visit_' + node[0])
        hdlr(node)
        self.context = self.context.parent

    # visit_unit:
    def visit_unit (self, node) :
        assert len(node) == 9, node
        tp, loc, name, headers, global_setup, data, setup, teardown, body = node
        has_tests = any((n[0] == 'test') for n in body)
        # get unit path
        path = self.context.unit_path
        if path == '' : path = name
        else : path = path + '.' + name
        self.context.unit_path = path
        # write headers
        for block in headers :
            self.write_code('headers', block[2])
        # write the global_setup
        if global_setup is not None :
            self.write_global_setup(path, global_setup)
        # register the data block
        if data is not None :
            self.context.data_stack = self.context.data_stack + (data,)
        # create the data struct
        data_name = get_data_name(path)
        self.writer.write('typedefs',
                          'typedef struct _%s %s;\n' % (data_name, data_name))
        self.writer.write('datadefs',
                          'struct _%s\n' % data_name,
                          '{\n')
        for block in self.context.data_stack :
            self.write_code('datadefs', block[2])
        self.writer.write('datadefs', '};\n')
        # register the setup
        if setup is not None :
            self.context.setup_stack = self.context.setup_stack + (setup,)
        # register the teardown
        if teardown is not None :
            self.context.teardown_stack = self.context.teardown_stack + (teardown,)
        # write the setup func
        if has_tests :
            setup_name = get_setup_func_name(path)
            self.writer.write('fndecls', 'static void %s ( %s *data );\n' %
                              (setup_name, data_name))
            self.writer.write('fndefs',
                              'static void %s ( %s *data )\n' % (setup_name, data_name),
                              '{\n')
            for block in self.context.setup_stack :
                self.write_code('fndefs', block[2])
            self.writer.write('fndefs', '}\n')
        # write the teardown func
        if has_tests :
            teardown_name = get_teardown_func_name(path)
            self.writer.write('fndecls', 'static void %s ( %s *data );\n' %
                              (teardown_name, data_name))
            self.writer.write('fndefs',
                              'static void %s ( %s *data )\n' % (teardown_name, data_name),
                              '{\n')
            for block in reversed(self.context.teardown_stack) :
                self.write_code('fndefs', block[2])
            self.writer.write('fndefs', '}\n')
        # unit registration
        self.writer.write('modinit.body',
                          'pif_suite_register_unit(suite, "%s");\n' % path)
        # process children
        for child in body :
            self.visit(child)

    # visit_test:
    def visit_test (self, node) :
        assert len(node) == 4
        tp, loc, name, code = node
        # get unit path
        unit_path = self.context.unit_path
        path = unit_path
        if path == '' : path = name
        else : path = path + '.' + name
        self.context.unit_path = path # ?
        data_name = get_data_name(unit_path)
        setup_name = get_setup_func_name(unit_path)
        teardown_name = get_teardown_func_name(unit_path)
        test_func = get_test_func(path)
        self.writer.write('modinit.body',
                          'pif_suite_register_test(suite, "%s", (PifTestFunc) %s, sizeof(%s), (PifSetupFunc) %s, (PifTeardownFunc) %s);\n' %
                          (path, test_func, data_name, setup_name, teardown_name))
        self.writer.write('fndecls',
                          'static void %s ( %s *data );\n' % (test_func, data_name))
        self.writer.write('fndefs',
                          'static void %s ( %s *data )\n' % (test_func, data_name),
                          '{\n')
        self.write_code('fndefs', code)
        self.writer.write('fndefs',
                          '}\n')

    # write_code:
    def write_code (self, section, code) :
        assert code[0] == 'code', code
        tp, loc, text = code
        self.writer.write(section,
                          '\n',
                          '# %d "%s"\n' % (loc[1], loc[0]),
                          text,
                          '\n')
        self.writer.write_loc(section)

    # write_global_setup:
    def write_global_setup (self, path, node) :
        assert len(node) == 3, node
        key, los, code = node
        fname = get_global_setup_name(path)
        self.writer.write('modinit.body',
                          'pif_suite_register_global_setup(suite, %s);\n' % fname)
        self.writer.write('fndecls',
                          'static void %s ( void );\n' % fname)
        self.writer.write('fndefs',
                          'static void %s ( void )\n' % fname,
                          '{\n')
        self.write_code('fndefs', code)
        self.writer.write('fndefs', '}\n')

# get_global_setup_name:
def get_global_setup_name (path) :
    return '__%s__global_setup' % path.replace('.', '_')

# get_module_init_func:
def get_module_init_func (modname) :
    return '__%s__module_init' % modname

# get_test_func:
def get_test_func (path) :
    return '__%s__test_func' % path.replace('.', '_')

# get_data_name:
def get_data_name (path) :
    return '__%s__data' % path.replace('.', '_')

# get_setup_func_name:
def get_setup_func_name (path) :
    return '__%s__setup' % path.replace('.', '_')

# get_teardown_func_name:
def get_teardown_func_name (path) :
    return '__%s__teardown' % path.replace('.', '_')

# newerthan:
#
# True if file2 does not exist or is older than file1. file1 can be a
# single filename or a list, in which case the function returns True
# if file2 is older than at least one of the files in it.
#
def newerthan (file1, file2) :
    if isinstance(file1, str) :
        file1 = (file1,)
    if not os.path.exists(file2) :
        return True
    stamp2 = os.path.getmtime(file2)
    for f in file1 :
        if os.path.getmtime(f) > stamp2 :
            return True
    return False
    
# main:
def main () :
    # create the config
    cfg = Config()
    # parse the command line
    shortopts = 'IPMGt:s:'
    cmd = ''
    modules = None
    opts, args = getopt.gnu_getopt(sys.argv[1:], shortopts)
    for o, a in opts :
        if o in ('-I',) :
            assert not cmd
            assert len(args) == 1, args
            cmd = 'init'
            cfgfile = None
            cfg.top_srcdir = os.path.realpath(os.getcwd())
            cfg.subdir, = args
        elif o in ('-M',) :
            assert not cmd
            assert not args, args
            cmd = 'gen-makefile'
            cfgfile = 'piftest.conf'
        elif o in ('-G',) :
            assert not cmd
            assert not args, args
            cmd = 'gen-sources'
            cfgfile = 'piftest.conf'
        elif o in ('-P',) :
            assert not cmd
            assert not args, args
            cmd = 'gen-po'
            cfgfile = 'piftest.conf'
        elif o in ('-t',) :
            cfg.top_srcdir = os.path.realpath(a)
        elif o in ('-s',) :
            cfg.subdir = a
        else :
            assert 0, (o, a)
    assert cmd
    # read the config file
    if cfgfile is not None :
        cfg.read_file(cfgfile)
    # process
    if cmd == 'init' :
        proc_init(cfg)
    elif cmd == 'gen-sources' :
        proc_gen_sources(cfg)
    elif cmd == 'gen-makefile' :
        proc_gen_makefile(cfg)
    elif cmd == 'gen-po' :
        proc_gen_po(cfg)
    else :
        assert 0, cmd

# _write_makefile rules:
def _write_makefile_rules (cfg, s) :
    s.write_rule('piftest.conf',
                 ['$(srcdir)/piftest.conf.in', '$(top_builddir)/config.status'],
                 'cd $(top_builddir) && ./config.status --file=$(subdir)/piftest.conf')
    s.write_rule('Makefile',
                 ['$(srcdir)/Makefile.in', '$(top_builddir)/config.status'],
                 'cd $(top_builddir) && ./config.status --file=$(subdir)/Makefile')
    # [FIXME] we need this dirty trick to pass 'make distcheck' -
    # there is probably a better way (like fixing piftest.conf and
    # Makefile.in mtimes ?)
    s.write_rule('$(srcdir)/Makefile.in',
                 'piftest.conf',
                 ('if echo >$(srcdir)/test.tmp; then \\',
                  '  rm $(srcdir)/test.tmp; \\',
                  '  $(PIFTEST) -t $(top_srcdir) -s $(subdir) -M;\\',
                  'else \\',
                  '  echo "WARNING: $(srcdir) does not seem to be writable";\\',
                  '  echo "WARNING: $(srcdir)/Makefile.in cannot be regenerated";\\',
                  'fi'))
    
# proc_init:
#
# Called at bootstrap time. Just generate a dummy makefile which only
# contains the rules to rebuild itself and the config file.
#
def proc_init (cfg) :
    makefile = os.path.join(cfg.top_srcdir, cfg.subdir, 'Makefile.in')
    trace("init: generating makefile '%s'" % makefile)
    w = Writer()
    s = w.get_section('')
    def subst (n) :
        return '%s = @%s@\n' % (n, n)
    s.write('# dummy makefile\n')
    s.write(subst('top_srcdir'),
            subst('srcdir'),
            subst('top_builddir'),
            subst('PIFTEST'),
            'subdir = %s\n' % cfg.subdir)
    _write_makefile_rules(cfg, s)
    # output
    tmpfile = makefile + '.tmp'
    with open(tmpfile, "wt") as f :
        w.dump(f, makefile)
    os.rename(tmpfile, makefile)
    
# proc_gen_makefile:
def proc_gen_makefile (cfg) :
    assert cfg.top_srcdir
    assert cfg.subdir
    makefile = os.path.join(cfg.top_srcdir, cfg.subdir, 'Makefile.in')
    trace("generating makefile '%s'" % makefile)
    # [fixme] create the Po files
    depsdir = '.deps'
    try: os.mkdir(depsdir)
    except OSError as exc:
        if exc.errno != errno.EEXIST : raise
    for base in [cfg.suite] + cfg.modules + cfg.extra_c :
        pofile = os.path.join(depsdir, base+'.Po')
        if not os.path.exists(pofile) :
            with open(pofile, 'wt') as f :
                f.write('%s.o: %s.c\n' % (base, base))
    # create the writer
    w = Writer()
    s = w.get_section('')
    s.write('# %s\n' % makefile)
    # VPATH
    s.write('VPATH = @%s@\n' % 'srcdir')
    # define some vars
    def subst (n) :
        return '%s = @%s@\n' % (n, n)
    s.write(subst('abs_top_builddir'),
            subst('top_builddir'),
            subst('top_srcdir'),
            subst('srcdir'),
            'subdir = %s\n' % cfg.subdir,
            subst('CFLAGS'),
            subst('LDFLAGS'),
            'LIBTOOL = libtool\n', # [fixme] subst('LIBTOOL'),
            subst('CC'),
            'CCLD = $(CC)\n',
            'depcomp = $(top_srcdir)/depcomp\n', # [fixme] subst
            subst('CCDEPMODE'),
            subst('PIFTEST'))
    # check target
    s.write('.PHONY: check\n')
    s.write_rule('check', cfg.suite, './%s' % cfg.suite)
    # empty targets
    empty_targets = ('all', 'install', 'uninstall', 'dvi', 'installcheck')
    s.write('EMPTY_AUTOMAKE_TARGETS = %s\n' % ' '.join(empty_targets),
            '.PHONY: $(EMPTY_AUTOMAKE_TARGETS)\n',
            '$(EMPTY_AUTOMAKE_TARGETS):\n')
    # makefile regeneration
    _write_makefile_rules(cfg, s)
    # distdir
    cmds = [
        '@echo "** DISTDIR **" >&2',
        '@echo "pwd: `pwd`" >&2',
        '@echo "DESTDIR: $(DESTDIR)" >&2',
        '@echo "top_distdir: $(top_distdir) (`readlink -e $(top_distdir)`)" >&2',
        '@echo "distdir: $(distdir) (`readlink -e $(distdir)`)" >&2',
        'cp -vf $(srcdir)/piftest.conf.in $(srcdir)/test_*.in $(distdir)',
        'cp -vf $(srcdir)/Makefile.in $(distdir)',
    ]
    s.write_rule('distdir', None, cmds)
    # distclean
    # [FIXME] some of these should go in 'clean' instead ?
    s.write('.PHONY: distclean\n')
    s.write_rule('distclean', None,
                 ('rm -rf .libs .deps',
                  'rm -f %s *.c *.o *.lo *.stamp-h piftest.conf' % cfg.suite))
    # test suite program
    s.write_rule(cfg.suite, [cfg.suite+'.o'] + [m+'.o' for m in cfg.modules] + [m+'.o' for m in cfg.extra_c],
                 '$(LIBTOOL) --tag=CC --mode=link $(CCLD) -o $@ $^ $(LDFLAGS) %s' % cfg.ldflags)
    # object compilation
    s.write_rule('.c.o', None,
                 'source=$< object=$@ $(CCDEPMODE) DEPDIR=.deps libtool=yes $(depcomp) $(LIBTOOL) --tag=CC --mode=compile $(CC) -c -o $@ $< $(CFLAGS) %s' % cfg.cflags)
    # include deps
    s.write('include .deps/%s.Po\n' % cfg.suite)
    for m in cfg.modules + cfg.extra_c :
        s.write('include .deps/%s.Po\n' % m)
    # sources generation
    s.write_rule([cfg.suite+'.c'] + [m+'.c' for m in cfg.modules],
                 cfg.suite+'.stamp-h')
    s.write_rule(cfg.suite+'.stamp-h', ['$(srcdir)/'+m+'.in' for m in cfg.modules] + [cfg.cfgfile, cfg.progpath],
                 ('$(PIFTEST) -t $(top_srcdir) -s $(subdir) -G',
                  'echo >$@'))
    # output
    # trace("** OUTPUT **")
    # w.dump(sys.stderr)
    # trace("************")
    tmpfile = makefile + '.tmp'
    with open(tmpfile, 'wt') as f :
        w.dump(f, makefile)
    os.rename(tmpfile, makefile)
    
# proc_gen_sources:
def proc_gen_sources (cfg) :
    assert cfg.top_srcdir
    assert cfg.subdir
    trace("generating sources")
    # generate the main C file (<suite>.c)
    main_c = cfg.suite + '.c'
    if newerthan((cfg.cfgfile, cfg.progpath), main_c) :
        trace("  + %s" % main_c)
        _proc_gen_main(cfg, main_c)
    else :
        trace("  - %s" % main_c)
    # generate the modules
    for mod in cfg.modules :
        mod_in = os.path.join(cfg.srcdir, mod+'.in')
        mod_c = mod+'.c'
        if newerthan((cfg.cfgfile, cfg.progpath, mod_in), mod_c) :
            trace("  + %s (%s)" % (mod_c, mod_in))
            _proc_gen_source(cfg, mod, mod_in, mod_c)
        else :
            trace("  - %s (%s)" % (mod_c, mod_in))

# _proc_gen_main:
def _proc_gen_main (cfg, main_c) :
    w = Writer()
    w.section('includes')
    w.section('fndecls')
    w.section('mainwrap')
    w.section('main')
    w.section('main.head')
    w.section('main.decls')
    w.section('main.init')
    w.section('main.modinit')
    w.section('main.body')
    w.section('main.foot')
    # includes
    w.write('includes',
            '#include <piftest.h>\n',
            '#include <stdlib.h>\n',
            '#include <string.h>\n')
    # main wrapper
    w.write('mainwrap',
            'int main ( int argc, char **argv )\n',
            '{\n',
            '  static char *supp_files[] = {\n',
            ''.join('  "%s",\n' % f for f in cfg.valgrind_supp_files),
            '  NULL',
            '  };\n'
            '  PifConfig config = { 0, };\n',
            '  config.argc = argc;\n',
            '  config.argv = argv;\n',
            '  config.main_func = _main;\n',
            '  config.valgrind_supp_files = supp_files;\n',
            '  return piftest_main(&config);\n',
            '}\n')
    # main
    w.write('fndecls', 'static int _main ( void );\n')
    w.write('main.head',
            'static int _main ( void )\n',
            '{\n')
    w.write('main.foot',
            '}\n')
    # suite init
    w.write('main.decls',
            'PifSuite *suite;\n')
    w.write('main.init',
            'suite = pif_suite_new("%s");\n' % cfg.suite)
    # run
    w.write('main.body',
            'pif_suite_run(suite, ".");\n',
            'pif_suite_destroy(suite);\n',
            'return 0;') # [todo]
    # modules
    for mod in cfg.modules :
        init_func = get_module_init_func(mod)
        w.write('fndecls',
                'void %s ( PifSuite *suite );\n' % init_func)
        w.write('main.modinit',
                '%s(suite);\n' % init_func)
    # output
    tmpfile = main_c + '.tmp'
    with open(tmpfile, 'wt') as f :
        w.dump(f, main_c)
    os.rename(tmpfile, main_c)

# _proc_gen_source:
def _proc_gen_source (cfg, mod_name, mod_in, mod_c) :
    # start cpp
    cpp_cmd = ['cpp', mod_in]
    cpp_proc = subprocess.Popen(cpp_cmd,
                                stdout=subprocess.PIPE,
                                universal_newlines=True)
    # parse output
    parser = Parser(mod_name)
    ast = parser.parse(cpp_proc.stdout)
    # terminate cpp
    r = cpp_proc.wait()
    assert r == 0, r
    # ...
    trace("AST:\n%s" % pprint.pformat(ast))
    # process the tree
    visitor = ASTVisitor()
    visitor.process(ast)
    # output
    tmpfile = mod_c + '.tmp'
    with open(tmpfile, 'wt') as f :
        visitor.writer.dump(f, mod_c)
    os.rename(tmpfile, mod_c)

# proc_gen_po:
def proc_gen_po (cfg) :
    trace("generating Po files")
    depsdir = '.deps'
    try: os.makedirs(depsdir)
    except OSError as exc:
        if exc.errno != errno.EEXIST : raise
    for fname in [cfg.suite] + cfg.modules + cfg.extra_c :
        pofile = os.path.join(depsdir, fname+'.Po')
        with open(pofile, 'wt') as f :
            f.write('%s.o: %s.c\n' % (fname, fname))

# exec
if __name__ == '__main__' :
    main()
